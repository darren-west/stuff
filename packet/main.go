package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
)

const PacketApiEndpoint = "https://api.packet.net"

func main() {
	args := os.Args[1:]
	var projectID, authToken string
	if len(args) != 2 {
		fmt.Printf("Give two parameters projectID, authToken\n")
	}
	projectID = args[0]
	authToken = args[1]
	if err := DeleteAllVolumesForProject(projectID, authToken); err != nil {
		log.Printf("Failed to delete volumes for %s\n", projectID)
	}
}

func DeleteAllVolumesForProject(projectID string, authToken string) (err error) {
	client := &http.Client{}
	req, err := http.NewRequest("GET", fmt.Sprintf("%s/projects/%s/storage", PacketApiEndpoint, projectID), nil)
	if err != nil {
		return
	}
	req.Header.Add("X-Auth-Token", authToken)
	resp, err := client.Do(req)
	if err != nil {
		return
	}
	defer resp.Body.Close()
	buf, _ := ioutil.ReadAll(resp.Body)
	r := Response{}

	if err = json.Unmarshal(buf, &r); err != nil {
		return
	}
	for _, v := range r.Volumes {
		DeleteVolume(projectID, v.ID, authToken)
	}

	log.Printf("delted %d volumes\n", len(r.Volumes))

	return
}

func DeleteVolume(projectID string, volumeId string, authToken string) (err error) {
	client := &http.Client{}
	req, err := http.NewRequest("DELETE", fmt.Sprintf("%s/projects/%s/storage/%s", PacketApiEndpoint, projectID, volumeId), nil)
	if err != nil {
		return
	}
	req.Header.Add("X-Auth-Token", authToken)
	_, err = client.Do(req)
	if err != nil {
		return
	}
	log.Printf("deleted volume '%s'\n", volumeId)
	return
}

//  generated by http://json2struct.mervine.net/

type Response struct {
	Volumes []struct {
		Access struct {
			Ips []string `json:"ips"`
			Iqn string   `json:"iqn"`
		} `json:"access"`
		Attachments  []interface{} `json:"attachments"`
		BillingCycle string        `json:"billing_cycle"`
		CreatedAt    string        `json:"created_at"`
		Description  string        `json:"description"`
		Facility     struct {
			Href string `json:"href"`
		} `json:"facility"`
		Href   string `json:"href"`
		ID     string `json:"id"`
		Locked bool   `json:"locked"`
		Name   string `json:"name"`
		Plan   struct {
			AvailableIn []interface{} `json:"available_in"`
			Description string        `json:"description"`
			ID          string        `json:"id"`
			Line        string        `json:"line"`
			Name        string        `json:"name"`
			Pricing     struct {
				Hour float64 `json:"hour"`
			} `json:"pricing"`
			Slug  string   `json:"slug"`
			Specs struct{} `json:"specs"`
		} `json:"plan"`
		Project struct {
			Href string `json:"href"`
		} `json:"project"`
		Size             int           `json:"size"`
		SnapshotPolicies []interface{} `json:"snapshot_policies"`
		State            string        `json:"state"`
		UpdatedAt        string        `json:"updated_at"`
	} `json:"volumes"`
}
